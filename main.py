from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
import asyncio
import texts as T
import Keyboards as K
import constants as C
import dicts as DCT
from api_calls import banks_dict, get_file, functions_calls

#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+#
bot = Bot(token=C.BOT_API_TOKEN)                                 #
dp = Dispatcher(bot)                                            #
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+#
chat_states = {}
users_currency = {}                                             #
users_banks = {}                                                #
#===============================================================#

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    id = message.chat.id
    users_banks[id] = ''
    users_currency[id] = ''
    keyboard_start = await K.get_bank_keyboard()
    await bot.send_message(id, T.greetings, reply_markup=keyboard_start)


@dp.message_handler(content_types=["text"])
async def handle_text(message: types.Message):
      await bot.send_message(message.chat.id, "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")

@dp.callback_query_handler(lambda c: True)
async def process_callback_language(call):
    try:
        id = call.message.chat.id
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        state = chat_states.get(id)
        msg_id = call.message.message_id
        data = call.data

        if data in DCT.banks:
            users_banks[id] = data
            curr_keyboard = await K.get_currency_keyboard(data)
            # –ú–µ–Ω—è–µ–º –±–∞–Ω–∫
            if state == 'another_bank':
                currency = users_currency.get(id)
                actions_keyboard = await K.get_actions(data)
                await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫: {data}.\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}.\n–í—ã–±–µ—Ä–∏ —Ç–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. üëá",
                                            reply_markup=actions_keyboard)
                chat_states[id] = ''
                return
            # –ë–∞–Ω–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É, –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
            if state in functions_calls:
                currency = users_currency.get(id)
                if currency == '':
                    await call.message.edit_text(f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É!\n–í—ã–±–µ—Ä–∏ –µ–µ —Å–ø–∏—Å–∫–∞! üëá",
                                                reply_markup=curr_keyboard)
                    return
                else:
                    actions_keyboard = await K.get_actions(data)
                    await bot.delete_message(id,msg_id)
                    call_functions = functions_calls.get(state)
                    await call_functions(currency)
                    with open(f"{id}_delta.png", "rb") as file:
                        await bot.send_photo(id, file)
                    await bot.send_message(id,
                                        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫: {data}.\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}.\n–í—ã–±–µ—Ä–∏ —Ç–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. üëá",
                                        reply_markup=actions_keyboard)
                    chat_states[id] = ''
                    return

            await call.message.edit_text(f"–¢—ã –≤—ã–±—Ä–∞–ª {data}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. üëá", reply_markup=curr_keyboard)

        if data in DCT.currency:
            bank = users_banks.get(id)
            actions_keyboard = await K.get_actions(bank)
            curr_keyboard = await K.get_currency_keyboard(bank)
            users_currency[id] = data 
            if state in functions_calls:
                if bank == '':
                    await call.message.edit_text(f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É!\n–í—ã–±–µ—Ä–∏ –µ–µ —Å–ø–∏—Å–∫–∞! üëá",
                                                reply_markup=curr_keyboard)
                    return
                else:
                    await bot.delete_message(id,msg_id)
                    call_functions = functions_calls.get(state)
                    await call_functions(data)
                    with open(f"{id}_delta.png", "rb") as file:
                        await bot.send_photo(id, file)
                    await bot.send_message(id,
                                        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫: {bank}.\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {data}.\n–í—ã–±–µ—Ä–∏ —Ç–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. üëá",
                                        reply_markup=actions_keyboard)
                    chat_states[id] = ''
                    return
            await call.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫: {bank}.\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {data}.\n–í—ã–±–µ—Ä–∏ —Ç–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. üëá",
                reply_markup=actions_keyboard)

        if data in DCT.actions:
            bank = users_banks.get(id)
            currency = users_currency.get(id)
            actions_keyboard = await K.get_actions(bank)
            keyboard_start = await K.get_bank_keyboard()
            curr_keyboard = await K.get_currency_keyboard(bank)
            if data == 'another_bank':
                chat_states[id] = 'another_bank'
                await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫: {bank}.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å. üëá",
                                            reply_markup=keyboard_start)
                return
            if data == 'another_currency':
                await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å. üëá",
                                            reply_markup=curr_keyboard)
                return
            chat_states[id] = data
            if data == 'choose_date' and bank != '–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫':
                return
            elif data == 'choose_date' and bank == '–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫':
                return
            if bank == '':
                await call.message.edit_text(f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫!\n–í—ã–±–µ—Ä–∏ –µ–≥–æ —Å–ø–∏—Å–∫–∞! üëá", reply_markup=keyboard_start)
                return
            if currency == '':
                await call.message.edit_text(f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É!\n–í—ã–±–µ—Ä–∏ –µ–µ —Å–ø–∏—Å–∫–∞! üëá", reply_markup=curr_keyboard)
                return
            await bot.delete_message(id, msg_id)
            call_functions = functions_calls.get(data)
            await call_functions(currency, id)
            with open(f"{id}_delta.png", "rb") as file:
                    await bot.send_photo(id, file)
            await bot.send_message(id,f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫: {bank}.\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}.\n–í—ã–±–µ—Ä–∏ —Ç–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. üëá",
                                            reply_markup=actions_keyboard)
            chat_states[id] = ''
            return
    except:
        await bot.send_message(id, "–ß—Ç–æ-—Ç–æ –ø–æ–ª—à–æ –Ω–µ —Ç–∞–∫...")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)#, on_startup=on_start, on_shutdown=on_shutdown)